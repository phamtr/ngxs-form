{
  "version": 3,
  "file": "ngxs-form-plugin.umd.js",
  "sources": [
    "ng://@ngxs/form-plugin/packages/form-plugin/src/form.module.ts",
    "ng://@ngxs/form-plugin/packages/form-plugin/src/directive.ts",
    "ng://@ngxs/form-plugin/packages/form-plugin/src/form.plugin.ts",
    "ng://@ngxs/form-plugin/packages/form-plugin/src/actions.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NGXS_PLUGINS } from '@ngxs/store';\nimport { NgxsFormPlugin } from './form.plugin';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormDirective } from './directive';\n\n@NgModule({\n  imports: [ReactiveFormsModule],\n  declarations: [FormDirective],\n  exports: [FormDirective]\n})\nexport class NgxsFormPluginModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgxsFormPluginModule,\n      providers: [\n        {\n          provide: NGXS_PLUGINS,\n          useClass: NgxsFormPlugin,\n          multi: true\n        }\n      ]\n    };\n  }\n}\n",
    "import { Directive, Input, OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { FormGroupDirective } from '@angular/forms';\nimport { Store, getValue } from '@ngxs/store';\nimport { Subject } from 'rxjs';\nimport { takeUntil, debounceTime, first } from 'rxjs/operators';\nimport { UpdateFormStatus, UpdateFormValue, UpdateFormDirty, UpdateFormErrors, UpdateForm } from './actions';\n\n@Directive({ selector: '[ngxsForm]' })\nexport class FormDirective implements OnInit, OnDestroy {\n  @Input('ngxsForm') path: string;\n  @Input('ngxsFormDebounce') debounce = 100;\n  @Input('ngxsFormClearOnDestroy') clearDestroy: boolean;\n\n  private _destroy$ = new Subject<null>();\n  private _updating = false;\n\n  constructor(private _store: Store, private _formGroupDirective: FormGroupDirective, private _cd: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this._store\n      .select(state => getValue(state, `${this.path}.model`))\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(model => {\n        if (!this._updating && model) {\n          this._formGroupDirective.form.patchValue(model);\n          this._cd.markForCheck();\n        }\n      });\n\n    // On first state change, sync form model, status and dirty with state\n    this._store\n      .select(state => getValue(state, `${this.path}`))\n      .pipe(takeUntil(this._destroy$), first())\n      .subscribe(state => {\n        this._store.dispatch([\n          new UpdateFormValue({\n            path: this.path,\n            value: this._formGroupDirective.form.getRawValue()\n          }),\n          new UpdateFormStatus({\n            path: this.path,\n            status: this._formGroupDirective.form.status\n          }),\n          new UpdateFormDirty({\n            path: this.path,\n            dirty: this._formGroupDirective.form.dirty\n          })\n        ]);\n      });\n\n    this._store\n      .select(state => getValue(state, `${this.path}.dirty`))\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(dirty => {\n        if (this._formGroupDirective.form.dirty !== dirty) {\n          if (dirty === true) {\n            this._formGroupDirective.form.markAsDirty();\n            this._cd.markForCheck();\n          } else if (dirty === false) {\n            this._formGroupDirective.form.markAsPristine();\n            this._cd.markForCheck();\n          }\n        }\n      });\n\n    this._store\n      .select(state => getValue(state, `${this.path}.disabled`))\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(disabled => {\n        if (this._formGroupDirective.form.disabled !== disabled) {\n          if (disabled === true) {\n            this._formGroupDirective.form.disable();\n            this._cd.markForCheck();\n          } else if (disabled === false) {\n            this._formGroupDirective.form.enable();\n            this._cd.markForCheck();\n          }\n        }\n      });\n\n    this._formGroupDirective.valueChanges.pipe(debounceTime(this.debounce), takeUntil(this._destroy$)).subscribe(() => {\n      const value = this._formGroupDirective.control.getRawValue();\n      this._updating = true;\n      this._store\n        .dispatch([\n          new UpdateFormValue({\n            path: this.path,\n            value\n          }),\n          new UpdateFormDirty({\n            path: this.path,\n            dirty: this._formGroupDirective.dirty\n          }),\n          new UpdateFormErrors({\n            path: this.path,\n            errors: this._formGroupDirective.errors\n          })\n        ])\n        .subscribe({\n          error: () => (this._updating = false),\n          complete: () => (this._updating = false)\n        });\n    });\n\n    this._formGroupDirective.statusChanges\n      .pipe(debounceTime(this.debounce), takeUntil(this._destroy$))\n      .subscribe((status: string) => {\n        this._store.dispatch(\n          new UpdateFormStatus({\n            status,\n            path: this.path\n          })\n        );\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroy$.next();\n    this._destroy$.complete();\n\n    if (this.clearDestroy) {\n      this._store.dispatch(\n        new UpdateForm({\n          path: this.path,\n          value: null,\n          dirty: null,\n          status: null,\n          errors: null\n        })\n      );\n    }\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { NgxsPlugin, setValue, getActionTypeFromInstance } from '@ngxs/store';\nimport { UpdateForm, UpdateFormDirty, UpdateFormErrors,\n  UpdateFormStatus, UpdateFormValue, SetFormDirty, SetFormDisabled,\n  SetFormEnabled, SetFormPristine } from './actions';\n\n@Injectable()\nexport class NgxsFormPlugin implements NgxsPlugin {\n  constructor() {}\n\n  handle(state, event, next) {\n    const type = getActionTypeFromInstance(event);\n\n    let nextState = state;\n\n    if (type === UpdateFormValue.type || type === UpdateForm.type) {\n      nextState = setValue(nextState, `${event.payload.path}.model`, {\n        ...event.payload.value\n      });\n    }\n\n    if (type === UpdateFormStatus.type || type === UpdateForm.type) {\n      nextState = setValue(nextState, `${event.payload.path}.status`, event.payload.status);\n    }\n\n    if (type === UpdateFormErrors.type || type === UpdateForm.type) {\n      nextState = setValue(nextState, `${event.payload.path}.errors`, {\n        ...event.payload.errors\n      });\n    }\n\n    if (type === UpdateFormDirty.type || type === UpdateForm.type) {\n      nextState = setValue(nextState, `${event.payload.path}.dirty`, event.payload.dirty);\n    }\n\n    if (type === SetFormDirty.type) {\n      nextState = setValue(nextState, `${event.payload}.dirty`, true);\n    }\n\n    if (type === SetFormPristine.type) {\n      nextState = setValue(nextState, `${event.payload}.dirty`, false);\n    }\n\n    if (type === SetFormDisabled.type) {\n      nextState = setValue(nextState, `${event.payload}.disabled`, true);\n    }\n\n    if (type === SetFormEnabled.type) {\n      nextState = setValue(nextState, `${event.payload}.disabled`, false);\n    }\n\n    return next(nextState, event);\n  }\n}\n",
    "export class UpdateFormStatus {\n  static readonly type = '[Forms] Update Form Status';\n  constructor(public payload: { status: string | null; path: string }) {}\n}\n\nexport class UpdateFormValue {\n  static readonly type = '[Forms] Update Form Value';\n  constructor(public payload: { value: any; path: string }) {}\n}\n\nexport class UpdateForm {\n  static readonly type = '[Forms] Update Form';\n  constructor(\n    public payload: {\n      value: any;\n      errors: { [k: string]: string } | null;\n      dirty: boolean | null;\n      status: string | null;\n      path: string;\n    }\n  ) {}\n}\n\nexport class UpdateFormDirty {\n  static readonly type = '[Forms] Update Form Dirty';\n  constructor(public payload: { dirty: boolean | null; path: string }) {}\n}\n\nexport class SetFormDirty {\n  static readonly type = '[Forms] Set Form Dirty';\n  constructor(public payload: string) {}\n}\n\nexport class SetFormPristine {\n  static readonly type = '[Forms] Set Form Pristine';\n  constructor(public payload: string) {}\n}\n\nexport class UpdateFormErrors {\n  static readonly type = '[Forms] Update Form Errors';\n  constructor(public payload: { errors: { [k: string]: string } | null; path: string }) {}\n}\n\nexport class SetFormDisabled {\n  static readonly type = '[Forms] Set Form Disabled';\n  constructor(public payload: string) {}\n}\n\nexport class SetFormEnabled {\n  static readonly type = '[Forms] Set Form Enabled';\n  constructor(public payload: string) {}\n}\n"
  ],
  "names": [
    "NgModule",
    "NGXS_PLUGINS",
    "ChangeDetectorRef",
    "debounceTime",
    "takeUntil",
    "getValue",
    "first",
    "Subject",
    "setValue",
    "getActionTypeFromInstance"
  ],
  "mappings": "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"
}
