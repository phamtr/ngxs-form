{
  "version": 3,
  "file": "ngxs-form-plugin.umd.min.js",
  "sources": [
    "ng://@ngxs/form-plugin/packages/form-plugin/src/actions.ts",
    "ng://@ngxs/form-plugin/packages/form-plugin/src/form.plugin.ts",
    "ng://@ngxs/form-plugin/packages/form-plugin/src/directive.ts",
    "ng://@ngxs/form-plugin/packages/form-plugin/src/form.module.ts"
  ],
  "sourcesContent": [
    "export class UpdateFormStatus {\n  static readonly type = '[Forms] Update Form Status';\n  constructor(public payload: { status: string | null; path: string }) {}\n}\n\nexport class UpdateFormValue {\n  static readonly type = '[Forms] Update Form Value';\n  constructor(public payload: { value: any; path: string }) {}\n}\n\nexport class UpdateForm {\n  static readonly type = '[Forms] Update Form';\n  constructor(\n    public payload: {\n      value: any;\n      errors: { [k: string]: string } | null;\n      dirty: boolean | null;\n      status: string | null;\n      path: string;\n    }\n  ) {}\n}\n\nexport class UpdateFormDirty {\n  static readonly type = '[Forms] Update Form Dirty';\n  constructor(public payload: { dirty: boolean | null; path: string }) {}\n}\n\nexport class SetFormDirty {\n  static readonly type = '[Forms] Set Form Dirty';\n  constructor(public payload: string) {}\n}\n\nexport class SetFormPristine {\n  static readonly type = '[Forms] Set Form Pristine';\n  constructor(public payload: string) {}\n}\n\nexport class UpdateFormErrors {\n  static readonly type = '[Forms] Update Form Errors';\n  constructor(public payload: { errors: { [k: string]: string } | null; path: string }) {}\n}\n\nexport class SetFormDisabled {\n  static readonly type = '[Forms] Set Form Disabled';\n  constructor(public payload: string) {}\n}\n\nexport class SetFormEnabled {\n  static readonly type = '[Forms] Set Form Enabled';\n  constructor(public payload: string) {}\n}\n",
    "import { Injectable } from '@angular/core';\nimport { NgxsPlugin, setValue, getActionTypeFromInstance } from '@ngxs/store';\nimport { UpdateForm, UpdateFormDirty, UpdateFormErrors,\n  UpdateFormStatus, UpdateFormValue, SetFormDirty, SetFormDisabled,\n  SetFormEnabled, SetFormPristine } from './actions';\n\n@Injectable()\nexport class NgxsFormPlugin implements NgxsPlugin {\n  constructor() {}\n\n  handle(state, event, next) {\n    const type = getActionTypeFromInstance(event);\n\n    let nextState = state;\n\n    if (type === UpdateFormValue.type || type === UpdateForm.type) {\n      nextState = setValue(nextState, `${event.payload.path}.model`, {\n        ...event.payload.value\n      });\n    }\n\n    if (type === UpdateFormStatus.type || type === UpdateForm.type) {\n      nextState = setValue(nextState, `${event.payload.path}.status`, event.payload.status);\n    }\n\n    if (type === UpdateFormErrors.type || type === UpdateForm.type) {\n      nextState = setValue(nextState, `${event.payload.path}.errors`, {\n        ...event.payload.errors\n      });\n    }\n\n    if (type === UpdateFormDirty.type || type === UpdateForm.type) {\n      nextState = setValue(nextState, `${event.payload.path}.dirty`, event.payload.dirty);\n    }\n\n    if (type === SetFormDirty.type) {\n      nextState = setValue(nextState, `${event.payload}.dirty`, true);\n    }\n\n    if (type === SetFormPristine.type) {\n      nextState = setValue(nextState, `${event.payload}.dirty`, false);\n    }\n\n    if (type === SetFormDisabled.type) {\n      nextState = setValue(nextState, `${event.payload}.disabled`, true);\n    }\n\n    if (type === SetFormEnabled.type) {\n      nextState = setValue(nextState, `${event.payload}.disabled`, false);\n    }\n\n    return next(nextState, event);\n  }\n}\n",
    "import { Directive, Input, OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { FormGroupDirective } from '@angular/forms';\nimport { Store, getValue } from '@ngxs/store';\nimport { Subject } from 'rxjs';\nimport { takeUntil, debounceTime, first } from 'rxjs/operators';\nimport { UpdateFormStatus, UpdateFormValue, UpdateFormDirty, UpdateFormErrors, UpdateForm } from './actions';\n\n@Directive({ selector: '[ngxsForm]' })\nexport class FormDirective implements OnInit, OnDestroy {\n  @Input('ngxsForm') path: string;\n  @Input('ngxsFormDebounce') debounce = 100;\n  @Input('ngxsFormClearOnDestroy') clearDestroy: boolean;\n\n  private _destroy$ = new Subject<null>();\n  private _updating = false;\n\n  constructor(private _store: Store, private _formGroupDirective: FormGroupDirective, private _cd: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this._store\n      .select(state => getValue(state, `${this.path}.model`))\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(model => {\n        if (!this._updating && model) {\n          this._formGroupDirective.form.patchValue(model);\n          this._cd.markForCheck();\n        }\n      });\n\n    // On first state change, sync form model, status and dirty with state\n    this._store\n      .select(state => getValue(state, `${this.path}`))\n      .pipe(takeUntil(this._destroy$), first())\n      .subscribe(state => {\n        this._store.dispatch([\n          new UpdateFormValue({\n            path: this.path,\n            value: this._formGroupDirective.form.getRawValue()\n          }),\n          new UpdateFormStatus({\n            path: this.path,\n            status: this._formGroupDirective.form.status\n          }),\n          new UpdateFormDirty({\n            path: this.path,\n            dirty: this._formGroupDirective.form.dirty\n          })\n        ]);\n      });\n\n    this._store\n      .select(state => getValue(state, `${this.path}.dirty`))\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(dirty => {\n        if (this._formGroupDirective.form.dirty !== dirty) {\n          if (dirty === true) {\n            this._formGroupDirective.form.markAsDirty();\n            this._cd.markForCheck();\n          } else if (dirty === false) {\n            this._formGroupDirective.form.markAsPristine();\n            this._cd.markForCheck();\n          }\n        }\n      });\n\n    this._store\n      .select(state => getValue(state, `${this.path}.disabled`))\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(disabled => {\n        if (this._formGroupDirective.form.disabled !== disabled) {\n          if (disabled === true) {\n            this._formGroupDirective.form.disable();\n            this._cd.markForCheck();\n          } else if (disabled === false) {\n            this._formGroupDirective.form.enable();\n            this._cd.markForCheck();\n          }\n        }\n      });\n\n    this._formGroupDirective.valueChanges.pipe(debounceTime(this.debounce), takeUntil(this._destroy$)).subscribe(() => {\n      const value = this._formGroupDirective.control.getRawValue();\n      this._updating = true;\n      this._store\n        .dispatch([\n          new UpdateFormValue({\n            path: this.path,\n            value\n          }),\n          new UpdateFormDirty({\n            path: this.path,\n            dirty: this._formGroupDirective.dirty\n          }),\n          new UpdateFormErrors({\n            path: this.path,\n            errors: this._formGroupDirective.errors\n          })\n        ])\n        .subscribe({\n          error: () => (this._updating = false),\n          complete: () => (this._updating = false)\n        });\n    });\n\n    this._formGroupDirective.statusChanges\n      .pipe(debounceTime(this.debounce), takeUntil(this._destroy$))\n      .subscribe((status: string) => {\n        this._store.dispatch(\n          new UpdateFormStatus({\n            status,\n            path: this.path\n          })\n        );\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroy$.next();\n    this._destroy$.complete();\n\n    if (this.clearDestroy) {\n      this._store.dispatch(\n        new UpdateForm({\n          path: this.path,\n          value: null,\n          dirty: null,\n          status: null,\n          errors: null\n        })\n      );\n    }\n  }\n}\n",
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NGXS_PLUGINS } from '@ngxs/store';\nimport { NgxsFormPlugin } from './form.plugin';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormDirective } from './directive';\n\n@NgModule({\n  imports: [ReactiveFormsModule],\n  declarations: [FormDirective],\n  exports: [FormDirective]\n})\nexport class NgxsFormPluginModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgxsFormPluginModule,\n      providers: [\n        {\n          provide: NGXS_PLUGINS,\n          useClass: NgxsFormPlugin,\n          multi: true\n        }\n      ]\n    };\n  }\n}\n"
  ],
  "names": [
    "UpdateFormStatus",
    "payload",
    "this",
    "type",
    "UpdateFormValue",
    "UpdateFormDirty",
    "SetFormDirty",
    "UpdateFormErrors",
    "NgxsFormPlugin",
    "prototype",
    "handle",
    "state",
    "event",
    "next",
    "getActionTypeFromInstance",
    "nextState",
    "UpdateForm",
    "setValue",
    "path",
    "Object",
    "assign",
    "value",
    "status",
    "errors",
    "dirty",
    "SetFormPristine",
    "SetFormDisabled",
    "SetFormEnabled",
    "FormDirective",
    "_store",
    "_formGroupDirective",
    "_cd",
    "debounce",
    "_destroy$",
    "Subject",
    "_updating",
    "ngOnInit",
    "_this",
    "select",
    "getValue",
    "pipe",
    "takeUntil",
    "subscribe",
    "model",
    "form",
    "patchValue",
    "markForCheck",
    "first",
    "dispatch",
    "getRawValue",
    "markAsDirty",
    "markAsPristine",
    "disabled",
    "disable",
    "enable",
    "valueChanges",
    "debounceTime",
    "control",
    "error",
    "complete",
    "statusChanges",
    "ngOnDestroy",
    "clearDestroy",
    "ctorParameters",
    "ChangeDetectorRef",
    "propDecorators",
    "NgxsFormPluginModule",
    "forRoot",
    "ngModule",
    "providers",
    "provide",
    "NGXS_PLUGINS",
    "useClass",
    "multi",
    "decorators",
    "NgModule",
    "args"
  ],
  "mappings": "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"
}
