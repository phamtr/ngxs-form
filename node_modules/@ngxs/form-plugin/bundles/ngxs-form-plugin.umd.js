(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ngxs/store'), require('@angular/forms'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@ngxs/form-plugin', ['exports', '@angular/core', '@ngxs/store', '@angular/forms', 'rxjs', 'rxjs/operators'], factory) :
    (factory((global.ngxs = global.ngxs || {}, global.ngxs['form-plugin'] = {}),global.ng.core,global['ngxs-store'],global.ng.forms,global.rxjs,global.Rx.Observable.prototype));
}(this, (function (exports,core,store,forms,rxjs,operators) { 'use strict';

    var UpdateFormStatus = (function () {
        function UpdateFormStatus(payload) {
            this.payload = payload;
        }
        return UpdateFormStatus;
    }());
    UpdateFormStatus.type = '[Forms] Update Form Status';
    var UpdateFormValue = (function () {
        function UpdateFormValue(payload) {
            this.payload = payload;
        }
        return UpdateFormValue;
    }());
    UpdateFormValue.type = '[Forms] Update Form Value';
    var UpdateForm = (function () {
        function UpdateForm(payload) {
            this.payload = payload;
        }
        return UpdateForm;
    }());
    UpdateForm.type = '[Forms] Update Form';
    var UpdateFormDirty = (function () {
        function UpdateFormDirty(payload) {
            this.payload = payload;
        }
        return UpdateFormDirty;
    }());
    UpdateFormDirty.type = '[Forms] Update Form Dirty';
    var SetFormDirty = (function () {
        function SetFormDirty(payload) {
            this.payload = payload;
        }
        return SetFormDirty;
    }());
    SetFormDirty.type = '[Forms] Set Form Dirty';
    var SetFormPristine = (function () {
        function SetFormPristine(payload) {
            this.payload = payload;
        }
        return SetFormPristine;
    }());
    SetFormPristine.type = '[Forms] Set Form Pristine';
    var UpdateFormErrors = (function () {
        function UpdateFormErrors(payload) {
            this.payload = payload;
        }
        return UpdateFormErrors;
    }());
    UpdateFormErrors.type = '[Forms] Update Form Errors';
    var SetFormDisabled = (function () {
        function SetFormDisabled(payload) {
            this.payload = payload;
        }
        return SetFormDisabled;
    }());
    SetFormDisabled.type = '[Forms] Set Form Disabled';
    var SetFormEnabled = (function () {
        function SetFormEnabled(payload) {
            this.payload = payload;
        }
        return SetFormEnabled;
    }());
    SetFormEnabled.type = '[Forms] Set Form Enabled';
    var NgxsFormPlugin = (function () {
        function NgxsFormPlugin() {
        }
        NgxsFormPlugin.prototype.handle = function (state, event, next) {
            var type = store.getActionTypeFromInstance(event);
            var nextState = state;
            if (type === UpdateFormValue.type || type === UpdateForm.type) {
                nextState = store.setValue(nextState, event.payload.path + ".model", Object.assign({}, event.payload.value));
            }
            if (type === UpdateFormStatus.type || type === UpdateForm.type) {
                nextState = store.setValue(nextState, event.payload.path + ".status", event.payload.status);
            }
            if (type === UpdateFormErrors.type || type === UpdateForm.type) {
                nextState = store.setValue(nextState, event.payload.path + ".errors", Object.assign({}, event.payload.errors));
            }
            if (type === UpdateFormDirty.type || type === UpdateForm.type) {
                nextState = store.setValue(nextState, event.payload.path + ".dirty", event.payload.dirty);
            }
            if (type === SetFormDirty.type) {
                nextState = store.setValue(nextState, event.payload + ".dirty", true);
            }
            if (type === SetFormPristine.type) {
                nextState = store.setValue(nextState, event.payload + ".dirty", false);
            }
            if (type === SetFormDisabled.type) {
                nextState = store.setValue(nextState, event.payload + ".disabled", true);
            }
            if (type === SetFormEnabled.type) {
                nextState = store.setValue(nextState, event.payload + ".disabled", false);
            }
            return next(nextState, event);
        };
        return NgxsFormPlugin;
    }());
    NgxsFormPlugin.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    NgxsFormPlugin.ctorParameters = function () { return []; };
    var FormDirective = (function () {
        function FormDirective(_store, _formGroupDirective, _cd) {
            this._store = _store;
            this._formGroupDirective = _formGroupDirective;
            this._cd = _cd;
            this.debounce = 100;
            this._destroy$ = new rxjs.Subject();
            this._updating = false;
        }
        FormDirective.prototype.ngOnInit = function () {
            var _this = this;
            this._store
                .select(function (state) { return store.getValue(state, _this.path + ".model"); })
                .pipe(operators.takeUntil(this._destroy$))
                .subscribe(function (model) {
                if (!_this._updating && model) {
                    _this._formGroupDirective.form.patchValue(model);
                    _this._cd.markForCheck();
                }
            });
            // On first state change, sync form model, status and dirty with state
            this._store
                .select(function (state) { return store.getValue(state, "" + _this.path); })
                .pipe(operators.takeUntil(this._destroy$), operators.first())
                .subscribe(function (state) {
                _this._store.dispatch([
                    new UpdateFormValue({
                        path: _this.path,
                        value: _this._formGroupDirective.form.getRawValue()
                    }),
                    new UpdateFormStatus({
                        path: _this.path,
                        status: _this._formGroupDirective.form.status
                    }),
                    new UpdateFormDirty({
                        path: _this.path,
                        dirty: _this._formGroupDirective.form.dirty
                    })
                ]);
            });
            this._store
                .select(function (state) { return store.getValue(state, _this.path + ".dirty"); })
                .pipe(operators.takeUntil(this._destroy$))
                .subscribe(function (dirty) {
                if (_this._formGroupDirective.form.dirty !== dirty) {
                    if (dirty === true) {
                        _this._formGroupDirective.form.markAsDirty();
                        _this._cd.markForCheck();
                    }
                    else if (dirty === false) {
                        _this._formGroupDirective.form.markAsPristine();
                        _this._cd.markForCheck();
                    }
                }
            });
            this._store
                .select(function (state) { return store.getValue(state, _this.path + ".disabled"); })
                .pipe(operators.takeUntil(this._destroy$))
                .subscribe(function (disabled) {
                if (_this._formGroupDirective.form.disabled !== disabled) {
                    if (disabled === true) {
                        _this._formGroupDirective.form.disable();
                        _this._cd.markForCheck();
                    }
                    else if (disabled === false) {
                        _this._formGroupDirective.form.enable();
                        _this._cd.markForCheck();
                    }
                }
            });
            this._formGroupDirective.valueChanges.pipe(operators.debounceTime(this.debounce), operators.takeUntil(this._destroy$)).subscribe(function () {
                var value = _this._formGroupDirective.control.getRawValue();
                _this._updating = true;
                _this._store
                    .dispatch([
                    new UpdateFormValue({
                        path: _this.path,
                        value: value
                    }),
                    new UpdateFormDirty({
                        path: _this.path,
                        dirty: _this._formGroupDirective.dirty
                    }),
                    new UpdateFormErrors({
                        path: _this.path,
                        errors: _this._formGroupDirective.errors
                    })
                ])
                    .subscribe({
                    error: function () { return (_this._updating = false); },
                    complete: function () { return (_this._updating = false); }
                });
            });
            this._formGroupDirective.statusChanges
                .pipe(operators.debounceTime(this.debounce), operators.takeUntil(this._destroy$))
                .subscribe(function (status) {
                _this._store.dispatch(new UpdateFormStatus({
                    status: status,
                    path: _this.path
                }));
            });
        };
        FormDirective.prototype.ngOnDestroy = function () {
            this._destroy$.next();
            this._destroy$.complete();
            if (this.clearDestroy) {
                this._store.dispatch(new UpdateForm({
                    path: this.path,
                    value: null,
                    dirty: null,
                    status: null,
                    errors: null
                }));
            }
        };
        return FormDirective;
    }());
    FormDirective.decorators = [
        { type: core.Directive, args: [{ selector: '[ngxsForm]' },] },
    ];
    /** @nocollapse */
    FormDirective.ctorParameters = function () {
        return [
            { type: store.Store, },
            { type: forms.FormGroupDirective, },
            { type: core.ChangeDetectorRef, },
        ];
    };
    FormDirective.propDecorators = {
        "path": [{ type: core.Input, args: ['ngxsForm',] },],
        "debounce": [{ type: core.Input, args: ['ngxsFormDebounce',] },],
        "clearDestroy": [{ type: core.Input, args: ['ngxsFormClearOnDestroy',] },],
    };
    var NgxsFormPluginModule = (function () {
        function NgxsFormPluginModule() {
        }
        NgxsFormPluginModule.forRoot = function () {
            return {
                ngModule: NgxsFormPluginModule,
                providers: [
                    {
                        provide: store.NGXS_PLUGINS,
                        useClass: NgxsFormPlugin,
                        multi: true
                    }
                ]
            };
        };
        return NgxsFormPluginModule;
    }());
    NgxsFormPluginModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [forms.ReactiveFormsModule],
                    declarations: [FormDirective],
                    exports: [FormDirective]
                },] },
    ];

    exports.ɵa = FormDirective;
    exports.NgxsFormPluginModule = NgxsFormPluginModule;
    exports.NgxsFormPlugin = NgxsFormPlugin;
    exports.UpdateFormStatus = UpdateFormStatus;
    exports.UpdateFormValue = UpdateFormValue;
    exports.UpdateForm = UpdateForm;
    exports.UpdateFormDirty = UpdateFormDirty;
    exports.SetFormDirty = SetFormDirty;
    exports.SetFormPristine = SetFormPristine;
    exports.UpdateFormErrors = UpdateFormErrors;
    exports.SetFormDisabled = SetFormDisabled;
    exports.SetFormEnabled = SetFormEnabled;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngxs-form-plugin.umd.js.map
