import { Injectable, Directive, Input, ChangeDetectorRef, NgModule } from '@angular/core';
import { setValue, getActionTypeFromInstance, Store, getValue, NGXS_PLUGINS } from '@ngxs/store';
import { FormGroupDirective, ReactiveFormsModule } from '@angular/forms';
import { Subject } from 'rxjs';
import { takeUntil, debounceTime, first } from 'rxjs/operators';

var UpdateFormStatus = /** @class */ (function () {
    function UpdateFormStatus(payload) {
        this.payload = payload;
    }
    return UpdateFormStatus;
}());
UpdateFormStatus.type = '[Forms] Update Form Status';
var UpdateFormValue = /** @class */ (function () {
    function UpdateFormValue(payload) {
        this.payload = payload;
    }
    return UpdateFormValue;
}());
UpdateFormValue.type = '[Forms] Update Form Value';
var UpdateForm = /** @class */ (function () {
    function UpdateForm(payload) {
        this.payload = payload;
    }
    return UpdateForm;
}());
UpdateForm.type = '[Forms] Update Form';
var UpdateFormDirty = /** @class */ (function () {
    function UpdateFormDirty(payload) {
        this.payload = payload;
    }
    return UpdateFormDirty;
}());
UpdateFormDirty.type = '[Forms] Update Form Dirty';
var SetFormDirty = /** @class */ (function () {
    function SetFormDirty(payload) {
        this.payload = payload;
    }
    return SetFormDirty;
}());
SetFormDirty.type = '[Forms] Set Form Dirty';
var SetFormPristine = /** @class */ (function () {
    function SetFormPristine(payload) {
        this.payload = payload;
    }
    return SetFormPristine;
}());
SetFormPristine.type = '[Forms] Set Form Pristine';
var UpdateFormErrors = /** @class */ (function () {
    function UpdateFormErrors(payload) {
        this.payload = payload;
    }
    return UpdateFormErrors;
}());
UpdateFormErrors.type = '[Forms] Update Form Errors';
var SetFormDisabled = /** @class */ (function () {
    function SetFormDisabled(payload) {
        this.payload = payload;
    }
    return SetFormDisabled;
}());
SetFormDisabled.type = '[Forms] Set Form Disabled';
var SetFormEnabled = /** @class */ (function () {
    function SetFormEnabled(payload) {
        this.payload = payload;
    }
    return SetFormEnabled;
}());
SetFormEnabled.type = '[Forms] Set Form Enabled';

var NgxsFormPlugin = /** @class */ (function () {
    function NgxsFormPlugin() {
    }
    NgxsFormPlugin.prototype.handle = function (state, event, next) {
        var type = getActionTypeFromInstance(event);
        var nextState = state;
        if (type === UpdateFormValue.type || type === UpdateForm.type) {
            nextState = setValue(nextState, event.payload.path + ".model", Object.assign({}, event.payload.value));
        }
        if (type === UpdateFormStatus.type || type === UpdateForm.type) {
            nextState = setValue(nextState, event.payload.path + ".status", event.payload.status);
        }
        if (type === UpdateFormErrors.type || type === UpdateForm.type) {
            nextState = setValue(nextState, event.payload.path + ".errors", Object.assign({}, event.payload.errors));
        }
        if (type === UpdateFormDirty.type || type === UpdateForm.type) {
            nextState = setValue(nextState, event.payload.path + ".dirty", event.payload.dirty);
        }
        if (type === SetFormDirty.type) {
            nextState = setValue(nextState, event.payload + ".dirty", true);
        }
        if (type === SetFormPristine.type) {
            nextState = setValue(nextState, event.payload + ".dirty", false);
        }
        if (type === SetFormDisabled.type) {
            nextState = setValue(nextState, event.payload + ".disabled", true);
        }
        if (type === SetFormEnabled.type) {
            nextState = setValue(nextState, event.payload + ".disabled", false);
        }
        return next(nextState, event);
    };
    return NgxsFormPlugin;
}());
NgxsFormPlugin.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NgxsFormPlugin.ctorParameters = function () { return []; };

var FormDirective = /** @class */ (function () {
    function FormDirective(_store, _formGroupDirective, _cd) {
        this._store = _store;
        this._formGroupDirective = _formGroupDirective;
        this._cd = _cd;
        this.debounce = 100;
        this._destroy$ = new Subject();
        this._updating = false;
    }
    FormDirective.prototype.ngOnInit = function () {
        var _this = this;
        this._store
            .select(function (state) { return getValue(state, _this.path + ".model"); })
            .pipe(takeUntil(this._destroy$))
            .subscribe(function (model) {
            if (!_this._updating && model) {
                _this._formGroupDirective.form.patchValue(model);
                _this._cd.markForCheck();
            }
        });
        // On first state change, sync form model, status and dirty with state
        this._store
            .select(function (state) { return getValue(state, "" + _this.path); })
            .pipe(takeUntil(this._destroy$), first())
            .subscribe(function (state) {
            _this._store.dispatch([
                new UpdateFormValue({
                    path: _this.path,
                    value: _this._formGroupDirective.form.getRawValue()
                }),
                new UpdateFormStatus({
                    path: _this.path,
                    status: _this._formGroupDirective.form.status
                }),
                new UpdateFormDirty({
                    path: _this.path,
                    dirty: _this._formGroupDirective.form.dirty
                })
            ]);
        });
        this._store
            .select(function (state) { return getValue(state, _this.path + ".dirty"); })
            .pipe(takeUntil(this._destroy$))
            .subscribe(function (dirty) {
            if (_this._formGroupDirective.form.dirty !== dirty) {
                if (dirty === true) {
                    _this._formGroupDirective.form.markAsDirty();
                    _this._cd.markForCheck();
                }
                else if (dirty === false) {
                    _this._formGroupDirective.form.markAsPristine();
                    _this._cd.markForCheck();
                }
            }
        });
        this._store
            .select(function (state) { return getValue(state, _this.path + ".disabled"); })
            .pipe(takeUntil(this._destroy$))
            .subscribe(function (disabled) {
            if (_this._formGroupDirective.form.disabled !== disabled) {
                if (disabled === true) {
                    _this._formGroupDirective.form.disable();
                    _this._cd.markForCheck();
                }
                else if (disabled === false) {
                    _this._formGroupDirective.form.enable();
                    _this._cd.markForCheck();
                }
            }
        });
        this._formGroupDirective.valueChanges.pipe(debounceTime(this.debounce), takeUntil(this._destroy$)).subscribe(function () {
            var value = _this._formGroupDirective.control.getRawValue();
            _this._updating = true;
            _this._store
                .dispatch([
                new UpdateFormValue({
                    path: _this.path,
                    value: value
                }),
                new UpdateFormDirty({
                    path: _this.path,
                    dirty: _this._formGroupDirective.dirty
                }),
                new UpdateFormErrors({
                    path: _this.path,
                    errors: _this._formGroupDirective.errors
                })
            ])
                .subscribe({
                error: function () { return (_this._updating = false); },
                complete: function () { return (_this._updating = false); }
            });
        });
        this._formGroupDirective.statusChanges
            .pipe(debounceTime(this.debounce), takeUntil(this._destroy$))
            .subscribe(function (status) {
            _this._store.dispatch(new UpdateFormStatus({
                status: status,
                path: _this.path
            }));
        });
    };
    FormDirective.prototype.ngOnDestroy = function () {
        this._destroy$.next();
        this._destroy$.complete();
        if (this.clearDestroy) {
            this._store.dispatch(new UpdateForm({
                path: this.path,
                value: null,
                dirty: null,
                status: null,
                errors: null
            }));
        }
    };
    return FormDirective;
}());
FormDirective.decorators = [
    { type: Directive, args: [{ selector: '[ngxsForm]' },] },
];
/** @nocollapse */
FormDirective.ctorParameters = function () { return [
    { type: Store, },
    { type: FormGroupDirective, },
    { type: ChangeDetectorRef, },
]; };
FormDirective.propDecorators = {
    "path": [{ type: Input, args: ['ngxsForm',] },],
    "debounce": [{ type: Input, args: ['ngxsFormDebounce',] },],
    "clearDestroy": [{ type: Input, args: ['ngxsFormClearOnDestroy',] },],
};

var NgxsFormPluginModule = /** @class */ (function () {
    function NgxsFormPluginModule() {
    }
    NgxsFormPluginModule.forRoot = function () {
        return {
            ngModule: NgxsFormPluginModule,
            providers: [
                {
                    provide: NGXS_PLUGINS,
                    useClass: NgxsFormPlugin,
                    multi: true
                }
            ]
        };
    };
    return NgxsFormPluginModule;
}());
NgxsFormPluginModule.decorators = [
    { type: NgModule, args: [{
                imports: [ReactiveFormsModule],
                declarations: [FormDirective],
                exports: [FormDirective]
            },] },
];

/**
 * Generated bundle index. Do not edit.
 */

export { FormDirective as Éµa, NgxsFormPluginModule, NgxsFormPlugin, UpdateFormStatus, UpdateFormValue, UpdateForm, UpdateFormDirty, SetFormDirty, SetFormPristine, UpdateFormErrors, SetFormDisabled, SetFormEnabled };
//# sourceMappingURL=ngxs-form-plugin.js.map
