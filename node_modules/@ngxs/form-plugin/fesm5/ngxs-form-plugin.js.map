{
  "version": 3,
  "file": "ngxs-form-plugin.js",
  "sources": [
    "ng://@ngxs/form-plugin/packages/form-plugin/src/form.module.ts",
    "ng://@ngxs/form-plugin/packages/form-plugin/src/directive.ts",
    "ng://@ngxs/form-plugin/packages/form-plugin/src/form.plugin.ts",
    "ng://@ngxs/form-plugin/packages/form-plugin/src/actions.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NGXS_PLUGINS } from '@ngxs/store';\nimport { NgxsFormPlugin } from './form.plugin';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormDirective } from './directive';\n\n@NgModule({\n  imports: [ReactiveFormsModule],\n  declarations: [FormDirective],\n  exports: [FormDirective]\n})\nexport class NgxsFormPluginModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgxsFormPluginModule,\n      providers: [\n        {\n          provide: NGXS_PLUGINS,\n          useClass: NgxsFormPlugin,\n          multi: true\n        }\n      ]\n    };\n  }\n}\n",
    "import { Directive, Input, OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { FormGroupDirective } from '@angular/forms';\nimport { Store, getValue } from '@ngxs/store';\nimport { Subject } from 'rxjs';\nimport { takeUntil, debounceTime, first } from 'rxjs/operators';\nimport { UpdateFormStatus, UpdateFormValue, UpdateFormDirty, UpdateFormErrors, UpdateForm } from './actions';\n\n@Directive({ selector: '[ngxsForm]' })\nexport class FormDirective implements OnInit, OnDestroy {\n  @Input('ngxsForm') path: string;\n  @Input('ngxsFormDebounce') debounce = 100;\n  @Input('ngxsFormClearOnDestroy') clearDestroy: boolean;\n\n  private _destroy$ = new Subject<null>();\n  private _updating = false;\n\n  constructor(private _store: Store, private _formGroupDirective: FormGroupDirective, private _cd: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this._store\n      .select(state => getValue(state, `${this.path}.model`))\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(model => {\n        if (!this._updating && model) {\n          this._formGroupDirective.form.patchValue(model);\n          this._cd.markForCheck();\n        }\n      });\n\n    // On first state change, sync form model, status and dirty with state\n    this._store\n      .select(state => getValue(state, `${this.path}`))\n      .pipe(takeUntil(this._destroy$), first())\n      .subscribe(state => {\n        this._store.dispatch([\n          new UpdateFormValue({\n            path: this.path,\n            value: this._formGroupDirective.form.getRawValue()\n          }),\n          new UpdateFormStatus({\n            path: this.path,\n            status: this._formGroupDirective.form.status\n          }),\n          new UpdateFormDirty({\n            path: this.path,\n            dirty: this._formGroupDirective.form.dirty\n          })\n        ]);\n      });\n\n    this._store\n      .select(state => getValue(state, `${this.path}.dirty`))\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(dirty => {\n        if (this._formGroupDirective.form.dirty !== dirty) {\n          if (dirty === true) {\n            this._formGroupDirective.form.markAsDirty();\n            this._cd.markForCheck();\n          } else if (dirty === false) {\n            this._formGroupDirective.form.markAsPristine();\n            this._cd.markForCheck();\n          }\n        }\n      });\n\n    this._store\n      .select(state => getValue(state, `${this.path}.disabled`))\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(disabled => {\n        if (this._formGroupDirective.form.disabled !== disabled) {\n          if (disabled === true) {\n            this._formGroupDirective.form.disable();\n            this._cd.markForCheck();\n          } else if (disabled === false) {\n            this._formGroupDirective.form.enable();\n            this._cd.markForCheck();\n          }\n        }\n      });\n\n    this._formGroupDirective.valueChanges.pipe(debounceTime(this.debounce), takeUntil(this._destroy$)).subscribe(() => {\n      const value = this._formGroupDirective.control.getRawValue();\n      this._updating = true;\n      this._store\n        .dispatch([\n          new UpdateFormValue({\n            path: this.path,\n            value\n          }),\n          new UpdateFormDirty({\n            path: this.path,\n            dirty: this._formGroupDirective.dirty\n          }),\n          new UpdateFormErrors({\n            path: this.path,\n            errors: this._formGroupDirective.errors\n          })\n        ])\n        .subscribe({\n          error: () => (this._updating = false),\n          complete: () => (this._updating = false)\n        });\n    });\n\n    this._formGroupDirective.statusChanges\n      .pipe(debounceTime(this.debounce), takeUntil(this._destroy$))\n      .subscribe((status: string) => {\n        this._store.dispatch(\n          new UpdateFormStatus({\n            status,\n            path: this.path\n          })\n        );\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroy$.next();\n    this._destroy$.complete();\n\n    if (this.clearDestroy) {\n      this._store.dispatch(\n        new UpdateForm({\n          path: this.path,\n          value: null,\n          dirty: null,\n          status: null,\n          errors: null\n        })\n      );\n    }\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { NgxsPlugin, setValue, getActionTypeFromInstance } from '@ngxs/store';\nimport { UpdateForm, UpdateFormDirty, UpdateFormErrors,\n  UpdateFormStatus, UpdateFormValue, SetFormDirty, SetFormDisabled,\n  SetFormEnabled, SetFormPristine } from './actions';\n\n@Injectable()\nexport class NgxsFormPlugin implements NgxsPlugin {\n  constructor() {}\n\n  handle(state, event, next) {\n    const type = getActionTypeFromInstance(event);\n\n    let nextState = state;\n\n    if (type === UpdateFormValue.type || type === UpdateForm.type) {\n      nextState = setValue(nextState, `${event.payload.path}.model`, {\n        ...event.payload.value\n      });\n    }\n\n    if (type === UpdateFormStatus.type || type === UpdateForm.type) {\n      nextState = setValue(nextState, `${event.payload.path}.status`, event.payload.status);\n    }\n\n    if (type === UpdateFormErrors.type || type === UpdateForm.type) {\n      nextState = setValue(nextState, `${event.payload.path}.errors`, {\n        ...event.payload.errors\n      });\n    }\n\n    if (type === UpdateFormDirty.type || type === UpdateForm.type) {\n      nextState = setValue(nextState, `${event.payload.path}.dirty`, event.payload.dirty);\n    }\n\n    if (type === SetFormDirty.type) {\n      nextState = setValue(nextState, `${event.payload}.dirty`, true);\n    }\n\n    if (type === SetFormPristine.type) {\n      nextState = setValue(nextState, `${event.payload}.dirty`, false);\n    }\n\n    if (type === SetFormDisabled.type) {\n      nextState = setValue(nextState, `${event.payload}.disabled`, true);\n    }\n\n    if (type === SetFormEnabled.type) {\n      nextState = setValue(nextState, `${event.payload}.disabled`, false);\n    }\n\n    return next(nextState, event);\n  }\n}\n",
    "export class UpdateFormStatus {\n  static readonly type = '[Forms] Update Form Status';\n  constructor(public payload: { status: string | null; path: string }) {}\n}\n\nexport class UpdateFormValue {\n  static readonly type = '[Forms] Update Form Value';\n  constructor(public payload: { value: any; path: string }) {}\n}\n\nexport class UpdateForm {\n  static readonly type = '[Forms] Update Form';\n  constructor(\n    public payload: {\n      value: any;\n      errors: { [k: string]: string } | null;\n      dirty: boolean | null;\n      status: string | null;\n      path: string;\n    }\n  ) {}\n}\n\nexport class UpdateFormDirty {\n  static readonly type = '[Forms] Update Form Dirty';\n  constructor(public payload: { dirty: boolean | null; path: string }) {}\n}\n\nexport class SetFormDirty {\n  static readonly type = '[Forms] Set Form Dirty';\n  constructor(public payload: string) {}\n}\n\nexport class SetFormPristine {\n  static readonly type = '[Forms] Set Form Pristine';\n  constructor(public payload: string) {}\n}\n\nexport class UpdateFormErrors {\n  static readonly type = '[Forms] Update Form Errors';\n  constructor(public payload: { errors: { [k: string]: string } | null; path: string }) {}\n}\n\nexport class SetFormDisabled {\n  static readonly type = '[Forms] Set Form Disabled';\n  constructor(public payload: string) {}\n}\n\nexport class SetFormEnabled {\n  static readonly type = '[Forms] Set Form Enabled';\n  constructor(public payload: string) {}\n}\n"
  ],
  "names": [],
  "mappings": "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"
}
