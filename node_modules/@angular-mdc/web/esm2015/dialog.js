/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
import { Component, ElementRef, Inject, Optional, ViewChild, ViewEncapsulation, Directive, HostBinding, Input, InjectionToken, ContentChild, ContentChildren, EventEmitter, Output, SkipSelf, Injectable, Injector, NgModule } from '@angular/core';
import { DOCUMENT, CommonModule } from '@angular/common';
import { Subject, defer } from 'rxjs';
import { BasePortalOutlet, CdkPortalOutlet, MdcPortalService, ComponentPortal, PortalInjector, PortalModule } from '@angular-mdc/web/portal';
import { MdcRipple } from '@angular-mdc/web/ripple';
import { MdcButton } from '@angular-mdc/web/button';
import { map, startWith } from 'rxjs/operators';
import { isBrowser, EventRegistry, ESCAPE } from '@angular-mdc/web/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template D
 */
class MdcDialogConfig {
    constructor() {
        /**
         * ID of the element that describes the dialog.
         */
        this.ariaDescribedBy = null;
        /**
         * Aria label to assign to the dialog element
         */
        this.ariaLabel = null;
        /**
         * Whether the user can use escape key to close the dialog
         */
        this.escapeToClose = true;
        /**
         * Whether the user can click outside to close the dialog
         */
        this.clickOutsideToClose = true;
        /**
         * Whether the dialog has a backdrop.
         */
        this.backdrop = true;
        /**
         * Data to be injected into the dialog content.
         */
        this.data = null;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MdcDialogContainer extends BasePortalOutlet {
    /**
     * @param {?} _elementRef
     * @param {?} _document
     */
    constructor(_elementRef, _document) {
        super();
        this._elementRef = _elementRef;
        this._document = _document;
        /**
         * A subject emitting after the dialog exits the view.
         */
        this._afterExit = new Subject();
    }
    /**
     * @return {?}
     */
    closed() {
        this._afterExit.next();
    }
    /**
     * Attach a ComponentPortal as content to this dialog container.
     * @template T
     * @param {?} portal Portal to be attached as the dialog content.
     * @return {?}
     */
    attachComponentPortal(portal) {
        return this._portalOutlet.attachComponentPortal(portal);
    }
}
MdcDialogContainer.decorators = [
    { type: Component, args: [{selector: 'mdc-dialog-container',
                template: '<ng-template cdkPortalOutlet></ng-template>',
                encapsulation: ViewEncapsulation.None
            },] },
];
/** @nocollapse */
MdcDialogContainer.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }
];
MdcDialogContainer.propDecorators = {
    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MdcDialogSurface {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
}
MdcDialogSurface.decorators = [
    { type: Directive, args: [{
                selector: '[mdcDialogSurface], mdc-dialog-surface',
                exportAs: 'mdcDialogSurface'
            },] },
];
/** @nocollapse */
MdcDialogSurface.ctorParameters = () => [
    { type: ElementRef }
];
MdcDialogSurface.propDecorators = {
    isHostClass: [{ type: HostBinding, args: ['class.mdc-dialog__surface',] }]
};
class MdcDialogHeader {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
}
MdcDialogHeader.decorators = [
    { type: Component, args: [{selector: '[mdcDialogHeader], mdc-dialog-header',
                exportAs: 'mdcDialogHeader',
                template: `
  <ng-content></ng-content>
  <h2 class="mdc-dialog__header__title" *ngIf="title">{{title}}</h2>
  `
            },] },
];
/** @nocollapse */
MdcDialogHeader.ctorParameters = () => [
    { type: ElementRef }
];
MdcDialogHeader.propDecorators = {
    title: [{ type: Input }],
    isHostClass: [{ type: HostBinding, args: ['class.mdc-dialog__header',] }]
};
class MdcDialogHeaderTitle {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
}
MdcDialogHeaderTitle.decorators = [
    { type: Directive, args: [{
                selector: '[mdcDialogHeaderTitle], mdc-dialog-header-title',
                exportAs: 'mdcDialogHeaderTitle'
            },] },
];
/** @nocollapse */
MdcDialogHeaderTitle.ctorParameters = () => [
    { type: ElementRef }
];
MdcDialogHeaderTitle.propDecorators = {
    isHostClass: [{ type: HostBinding, args: ['class.mdc-dialog__header__title',] }]
};
class MdcDialogBody {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.scrollable = false;
        this.isHostClass = true;
    }
    /**
     * @return {?}
     */
    get classScrollable() {
        return this.scrollable ? 'mdc-dialog__body--scrollable' : '';
    }
}
MdcDialogBody.decorators = [
    { type: Directive, args: [{
                selector: '[mdcDialogBody], mdc-dialog-body',
                exportAs: 'mdcDialogBody'
            },] },
];
/** @nocollapse */
MdcDialogBody.ctorParameters = () => [
    { type: ElementRef }
];
MdcDialogBody.propDecorators = {
    scrollable: [{ type: Input }],
    isHostClass: [{ type: HostBinding, args: ['class.mdc-dialog__body',] }],
    classScrollable: [{ type: HostBinding, args: ['class.mdc-dialog__body--scrollable',] }]
};
class MdcDialogFooter {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
}
MdcDialogFooter.decorators = [
    { type: Directive, args: [{
                selector: '[mdcDialogFooter], mdc-dialog-footer',
                exportAs: 'mdcDialogFooter'
            },] },
];
/** @nocollapse */
MdcDialogFooter.ctorParameters = () => [
    { type: ElementRef }
];
MdcDialogFooter.propDecorators = {
    isHostClass: [{ type: HostBinding, args: ['class.mdc-dialog__footer',] }]
};
class MdcDialogButton extends MdcButton {
    constructor() {
        super(...arguments);
        this.isFooterButton = true;
    }
    /**
     * @return {?}
     */
    get classAction() {
        return this.action ? 'mdc-dialog__action' : '';
    }
    /**
     * @return {?}
     */
    get classAccept() {
        return this.accept ? 'mdc-dialog__footer__button--accept' : '';
    }
    /**
     * @return {?}
     */
    get classCancel() {
        return this.cancel ? 'mdc-dialog__footer__button--cancel' : '';
    }
}
MdcDialogButton.decorators = [
    { type: Directive, args: [{
                selector: 'button[mdc-dialog-button], a[mdc-dialog-button]',
                providers: [MdcRipple]
            },] },
];
MdcDialogButton.propDecorators = {
    accept: [{ type: Input }],
    cancel: [{ type: Input }],
    action: [{ type: Input }],
    isFooterButton: [{ type: HostBinding, args: ['class.mdc-dialog__footer__button',] }],
    classAction: [{ type: HostBinding, args: ['class.mdc-dialog__action',] }],
    classAccept: [{ type: HostBinding, args: ['class.mdc-dialog__footer__button--accept',] }],
    classCancel: [{ type: HostBinding, args: ['class.mdc-dialog__footer__button--cancel',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Injection token for the Dialog's Data.
 */
const /** @type {?} */ DIALOG_DATA = new InjectionToken('DialogData');
/**
 * Injection token for the MdcDialogRef constructor.
 */
const /** @type {?} */ DIALOG_REF = new InjectionToken('DialogRef');
/**
 * Injection token for the MdcDialogConfig.
 */
const /** @type {?} */ DIALOG_CONFIG = new InjectionToken('DialogConfig');
/**
 * Injection token for the Dialog's MdcDialogContainer component.
 */
const /** @type {?} */ DIALOG_CONTAINER = new InjectionToken('DialogContainer');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Unique id for the created dialog.
 */
let /** @type {?} */ uniqueId = 0;
/**
 * Reference to a dialog dispatched from the MdcDialog service.
 * @template T, R
 */
class MdcDialogRef {
    /**
     * @param {?} _containerInstance
     * @param {?=} id
     */
    constructor(_containerInstance, id = `mdc-dialog-${uniqueId++}`) {
        this._containerInstance = _containerInstance;
        this.id = id;
        this.afterClosed().subscribe(() => {
            this._containerInstance.detach();
            this._containerInstance.dispose();
            this.componentInstance = /** @type {?} */ ((null));
        });
    }
    /**
     * Close the dialog.
     * @param {?=} dialogResult Optional result to return to the dialog opener.
     * @return {?}
     */
    close(dialogResult) {
        this._result = dialogResult;
        this._containerInstance.closed();
    }
    /**
     * @return {?}
     */
    get config() {
        return this._containerInstance.config;
    }
    /**
     * @return {?}
     */
    get data() {
        return this._containerInstance.config.data;
    }
    /**
     * Gets an observable that is notified when the dialog is finished closing.
     * @return {?}
     */
    afterClosed() {
        return this._containerInstance._afterExit.pipe(map(() => this._result));
    }
}

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @template A
 */
class MDCFoundation {
  /** @return enum{cssClasses} */
  static get cssClasses() {
    // Classes extending MDCFoundation should implement this method to return an object which exports every
    // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
    return {};
  }

  /** @return enum{strings} */
  static get strings() {
    // Classes extending MDCFoundation should implement this method to return an object which exports all
    // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
    return {};
  }

  /** @return enum{numbers} */
  static get numbers() {
    // Classes extending MDCFoundation should implement this method to return an object which exports all
    // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
    return {};
  }

  /** @return {!Object} */
  static get defaultAdapter() {
    // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
    // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
    // validation.
    return {};
  }

  /**
   * @param {A=} adapter
   */
  constructor(adapter = {}) {
    /** @protected {!A} */
    this.adapter_ = adapter;
  }

  init() {
    // Subclasses should override this method to perform initialization routines (registering events, etc.)
  }

  destroy() {
    // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
  }
}

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * See Material Design spec for more details on when to use ripples.
 * https://material.io/guidelines/motion/choreography.html#choreography-creation
 * @record
 */
class RippleCapableSurface {}

/** @protected {!Element} */
RippleCapableSurface.prototype.root_;

/**
 * Whether or not the ripple bleeds out of the bounds of the element.
 * @type {boolean|undefined}
 */
RippleCapableSurface.prototype.unbounded;

/**
 * Whether or not the ripple is attached to a disabled component.
 * @type {boolean|undefined}
 */
RippleCapableSurface.prototype.disabled;

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const cssClasses$1 = {
  ROOT: 'mdc-dialog',
  OPEN: 'mdc-dialog--open',
  ANIMATING: 'mdc-dialog--animating',
  BACKDROP: 'mdc-dialog__backdrop',
  SCROLL_LOCK: 'mdc-dialog-scroll-lock',
  ACCEPT_BTN: 'mdc-dialog__footer__button--accept',
  CANCEL_BTN: 'mdc-dialog__footer__button--cancel',
};

const strings$1 = {
  OPEN_DIALOG_SELECTOR: '.mdc-dialog--open',
  DIALOG_SURFACE_SELECTOR: '.mdc-dialog__surface',
  ACCEPT_SELECTOR: '.mdc-dialog__footer__button--accept',
  ACCEPT_EVENT: 'MDCDialog:accept',
  CANCEL_EVENT: 'MDCDialog:cancel',
};

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class MDCDialogFoundation extends MDCFoundation {
  static get cssClasses() {
    return cssClasses$1;
  }

  static get strings() {
    return strings$1;
  }

  static get defaultAdapter() {
    return {
      addClass: (/* className: string */) => {},
      removeClass: (/* className: string */) => {},
      addBodyClass: (/* className: string */) => {},
      removeBodyClass: (/* className: string */) => {},
      eventTargetHasClass: (/* target: EventTarget, className: string */) => /* boolean */ false,
      registerInteractionHandler: (/* evt: string, handler: EventListener */) => {},
      deregisterInteractionHandler: (/* evt: string, handler: EventListener */) => {},
      registerSurfaceInteractionHandler: (/* evt: string, handler: EventListener */) => {},
      deregisterSurfaceInteractionHandler: (/* evt: string, handler: EventListener */) => {},
      registerDocumentKeydownHandler: (/* handler: EventListener */) => {},
      deregisterDocumentKeydownHandler: (/* handler: EventListener */) => {},
      registerTransitionEndHandler: (/* handler: EventListener */) => {},
      deregisterTransitionEndHandler: (/* handler: EventListener */) => {},
      notifyAccept: () => {},
      notifyCancel: () => {},
      trapFocusOnSurface: () => {},
      untrapFocusOnSurface: () => {},
      isDialog: (/* el: Element */) => /* boolean */ false,
    };
  }

  constructor(adapter) {
    super(Object.assign(MDCDialogFoundation.defaultAdapter, adapter));
    this.isOpen_ = false;
    this.componentClickHandler_ = (evt) => {
      if (this.adapter_.eventTargetHasClass(evt.target, cssClasses$1.BACKDROP)) {
        this.cancel(true);
      }
    };
    this.dialogClickHandler_ = (evt) => this.handleDialogClick_(evt);
    this.documentKeydownHandler_ = (evt) => {
      if (evt.key && evt.key === 'Escape' || evt.keyCode === 27) {
        this.cancel(true);
      }
    };
    this.transitionEndHandler_ = (evt) => this.handleTransitionEnd_(evt);
  };

  destroy() {
    // Ensure that dialog is cleaned up when destroyed
    if (this.isOpen_) {
      this.adapter_.deregisterSurfaceInteractionHandler('click', this.dialogClickHandler_);
      this.adapter_.deregisterDocumentKeydownHandler(this.documentKeydownHandler_);
      this.adapter_.deregisterInteractionHandler('click', this.componentClickHandler_);
      this.adapter_.untrapFocusOnSurface();
      this.adapter_.deregisterTransitionEndHandler(this.transitionEndHandler_);
      this.adapter_.removeClass(MDCDialogFoundation.cssClasses.ANIMATING);
      this.adapter_.removeClass(MDCDialogFoundation.cssClasses.OPEN);
      this.enableScroll_();
    }
  }

  open() {
    this.isOpen_ = true;
    this.disableScroll_();
    this.adapter_.registerDocumentKeydownHandler(this.documentKeydownHandler_);
    this.adapter_.registerSurfaceInteractionHandler('click', this.dialogClickHandler_);
    this.adapter_.registerInteractionHandler('click', this.componentClickHandler_);
    this.adapter_.registerTransitionEndHandler(this.transitionEndHandler_);
    this.adapter_.addClass(MDCDialogFoundation.cssClasses.ANIMATING);
    this.adapter_.addClass(MDCDialogFoundation.cssClasses.OPEN);
  }

  close() {
    this.isOpen_ = false;
    this.enableScroll_();
    this.adapter_.deregisterSurfaceInteractionHandler('click', this.dialogClickHandler_);
    this.adapter_.deregisterDocumentKeydownHandler(this.documentKeydownHandler_);
    this.adapter_.deregisterInteractionHandler('click', this.componentClickHandler_);
    this.adapter_.untrapFocusOnSurface();
    this.adapter_.registerTransitionEndHandler(this.transitionEndHandler_);
    this.adapter_.addClass(MDCDialogFoundation.cssClasses.ANIMATING);
    this.adapter_.removeClass(MDCDialogFoundation.cssClasses.OPEN);
  }

  isOpen() {
    return this.isOpen_;
  }

  accept(shouldNotify) {
    if (shouldNotify) {
      this.adapter_.notifyAccept();
    }

    this.close();
  }

  cancel(shouldNotify) {
    if (shouldNotify) {
      this.adapter_.notifyCancel();
    }

    this.close();
  }

  handleDialogClick_(evt) {
    const {target} = evt;
    if (this.adapter_.eventTargetHasClass(target, cssClasses$1.ACCEPT_BTN)) {
      this.accept(true);
    } else if (this.adapter_.eventTargetHasClass(target, cssClasses$1.CANCEL_BTN)) {
      this.cancel(true);
    }
  }

  handleTransitionEnd_(evt) {
    if (this.adapter_.isDialog(evt.target)) {
      this.adapter_.deregisterTransitionEndHandler(this.transitionEndHandler_);
      this.adapter_.removeClass(MDCDialogFoundation.cssClasses.ANIMATING);
      if (this.isOpen_) {
        this.adapter_.trapFocusOnSurface();
      }    }  };

  disableScroll_() {
    this.adapter_.addBodyClass(cssClasses$1.SCROLL_LOCK);
  }

  enableScroll_() {
    this.adapter_.removeBodyClass(cssClasses$1.SCROLL_LOCK);
  }
}

var tabbable = function(el, options) {
  options = options || {};

  var elementDocument = el.ownerDocument || el;
  var basicTabbables = [];
  var orderedTabbables = [];

  // A node is "available" if
  // - it's computed style
  var isUnavailable = createIsUnavailable(elementDocument);

  var candidateSelectors = [
    'input',
    'select',
    'a[href]',
    'textarea',
    'button',
    '[tabindex]',
  ];

  var candidates = el.querySelectorAll(candidateSelectors.join(','));

  if (options.includeContainer) {
    var matches = Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;

    if (
      candidateSelectors.some(function(candidateSelector) {
        return matches.call(el, candidateSelector);
      })
    ) {
      candidates = Array.prototype.slice.apply(candidates);
      candidates.unshift(el);
    }
  }

  var candidate, candidateIndexAttr, candidateIndex;
  for (var i = 0, l = candidates.length; i < l; i++) {
    candidate = candidates[i];
    candidateIndexAttr = parseInt(candidate.getAttribute('tabindex'), 10);
    candidateIndex = isNaN(candidateIndexAttr) ? candidate.tabIndex : candidateIndexAttr;

    if (
      candidateIndex < 0
      || (candidate.tagName === 'INPUT' && candidate.type === 'hidden')
      || candidate.disabled
      || isUnavailable(candidate, elementDocument)
    ) {
      continue;
    }

    if (candidateIndex === 0) {
      basicTabbables.push(candidate);
    } else {
      orderedTabbables.push({
        index: i,
        tabIndex: candidateIndex,
        node: candidate,
      });
    }
  }

  var tabbableNodes = orderedTabbables
    .sort(function(a, b) {
      return a.tabIndex === b.tabIndex ? a.index - b.index : a.tabIndex - b.tabIndex;
    })
    .map(function(a) {
      return a.node
    });

  Array.prototype.push.apply(tabbableNodes, basicTabbables);

  return tabbableNodes;
};

function createIsUnavailable(elementDocument) {
  // Node cache must be refreshed on every check, in case
  // the content of the element has changed
  var isOffCache = [];

  // "off" means `display: none;`, as opposed to "hidden",
  // which means `visibility: hidden;`. getComputedStyle
  // accurately reflects visiblity in context but not
  // "off" state, so we need to recursively check parents.

  function isOff(node, nodeComputedStyle) {
    if (node === elementDocument.documentElement) return false;

    // Find the cached node (Array.prototype.find not available in IE9)
    for (var i = 0, length = isOffCache.length; i < length; i++) {
      if (isOffCache[i][0] === node) return isOffCache[i][1];
    }

    nodeComputedStyle = nodeComputedStyle || elementDocument.defaultView.getComputedStyle(node);

    var result = false;

    if (nodeComputedStyle.display === 'none') {
      result = true;
    } else if (node.parentNode) {
      result = isOff(node.parentNode);
    }

    isOffCache.push([node, result]);

    return result;
  }

  return function isUnavailable(node) {
    if (node === elementDocument.documentElement) return false;

    var computedStyle = elementDocument.defaultView.getComputedStyle(node);

    if (isOff(node, computedStyle)) return true;

    return computedStyle.visibility === 'hidden';
  }
}

var listeningFocusTrap = null;

function focusTrap(element, userOptions) {
  var tabbableNodes = [];
  var firstTabbableNode = null;
  var lastTabbableNode = null;
  var nodeFocusedBeforeActivation = null;
  var active = false;
  var paused = false;
  var tabEvent = null;

  var container = (typeof element === 'string')
    ? document.querySelector(element)
    : element;

  var config = userOptions || {};
  config.returnFocusOnDeactivate = (userOptions && userOptions.returnFocusOnDeactivate !== undefined)
    ? userOptions.returnFocusOnDeactivate
    : true;
  config.escapeDeactivates = (userOptions && userOptions.escapeDeactivates !== undefined)
    ? userOptions.escapeDeactivates
    : true;

  var trap = {
    activate: activate,
    deactivate: deactivate,
    pause: pause,
    unpause: unpause,
  };

  return trap;

  function activate(activateOptions) {
    if (active) return;

    var defaultedActivateOptions = {
      onActivate: (activateOptions && activateOptions.onActivate !== undefined)
        ? activateOptions.onActivate
        : config.onActivate,
    };

    active = true;
    paused = false;
    nodeFocusedBeforeActivation = document.activeElement;

    if (defaultedActivateOptions.onActivate) {
      defaultedActivateOptions.onActivate();
    }

    addListeners();
    return trap;
  }

  function deactivate(deactivateOptions) {
    if (!active) return;

    var defaultedDeactivateOptions = {
      returnFocus: (deactivateOptions && deactivateOptions.returnFocus !== undefined)
        ? deactivateOptions.returnFocus
        : config.returnFocusOnDeactivate,
      onDeactivate: (deactivateOptions && deactivateOptions.onDeactivate !== undefined)
        ? deactivateOptions.onDeactivate
        : config.onDeactivate,
    };

    removeListeners();

    if (defaultedDeactivateOptions.onDeactivate) {
      defaultedDeactivateOptions.onDeactivate();
    }

    if (defaultedDeactivateOptions.returnFocus) {
      setTimeout(function () {
        tryFocus(nodeFocusedBeforeActivation);
      }, 0);
    }

    active = false;
    paused = false;
    return this;
  }

  function pause() {
    if (paused || !active) return;
    paused = true;
    removeListeners();
  }

  function unpause() {
    if (!paused || !active) return;
    paused = false;
    addListeners();
  }

  function addListeners() {
    if (!active) return;

    // There can be only one listening focus trap at a time
    if (listeningFocusTrap) {
      listeningFocusTrap.pause();
    }
    listeningFocusTrap = trap;

    updateTabbableNodes();
    // Ensure that the focused element doesn't capture the event that caused the focus trap activation
    setTimeout(function () {
      tryFocus(firstFocusNode());
    }, 0);
    document.addEventListener('focus', checkFocus, true);
    document.addEventListener('click', checkClick, true);
    document.addEventListener('mousedown', checkPointerDown, true);
    document.addEventListener('touchstart', checkPointerDown, true);
    document.addEventListener('keydown', checkKey, true);

    return trap;
  }

  function removeListeners() {
    if (!active || listeningFocusTrap !== trap) return;

    document.removeEventListener('focus', checkFocus, true);
    document.removeEventListener('click', checkClick, true);
    document.removeEventListener('mousedown', checkPointerDown, true);
    document.removeEventListener('touchstart', checkPointerDown, true);
    document.removeEventListener('keydown', checkKey, true);

    listeningFocusTrap = null;

    return trap;
  }

  function getNodeForOption(optionName) {
    var optionValue = config[optionName];
    var node = optionValue;
    if (!optionValue) {
      return null;
    }
    if (typeof optionValue === 'string') {
      node = document.querySelector(optionValue);
      if (!node) {
        throw new Error('`' + optionName + '` refers to no known node');
      }
    }
    if (typeof optionValue === 'function') {
      node = optionValue();
      if (!node) {
        throw new Error('`' + optionName + '` did not return a node');
      }
    }
    return node;
  }

  function firstFocusNode() {
    var node;
    if (getNodeForOption('initialFocus') !== null) {
      node = getNodeForOption('initialFocus');
    } else if (container.contains(document.activeElement)) {
      node = document.activeElement;
    } else {
      node = tabbableNodes[0] || getNodeForOption('fallbackFocus');
    }

    if (!node) {
      throw new Error('You can\'t have a focus-trap without at least one focusable element');
    }

    return node;
  }

  // This needs to be done on mousedown and touchstart instead of click
  // so that it precedes the focus event
  function checkPointerDown(e) {
    if (config.clickOutsideDeactivates && !container.contains(e.target)) {
      deactivate({ returnFocus: false });
    }
  }

  function checkClick(e) {
    if (config.clickOutsideDeactivates) return;
    if (container.contains(e.target)) return;
    e.preventDefault();
    e.stopImmediatePropagation();
  }

  function checkFocus(e) {
    if (container.contains(e.target)) return;
    e.preventDefault();
    e.stopImmediatePropagation();
    // Checking for a blur method here resolves a Firefox issue (#15)
    if (typeof e.target.blur === 'function') e.target.blur();

    if (tabEvent) {
      readjustFocus(tabEvent);
    }
  }

  function checkKey(e) {
    if (e.key === 'Tab' || e.keyCode === 9) {
      handleTab(e);
    }

    if (config.escapeDeactivates !== false && isEscapeEvent(e)) {
      deactivate();
    }
  }

  function handleTab(e) {
    updateTabbableNodes();

    if (e.target.hasAttribute('tabindex') && Number(e.target.getAttribute('tabindex')) < 0) {
      return tabEvent = e;
    }

    e.preventDefault();
    var currentFocusIndex = tabbableNodes.indexOf(e.target);

    if (e.shiftKey) {
      if (e.target === firstTabbableNode || tabbableNodes.indexOf(e.target) === -1) {
        return tryFocus(lastTabbableNode);
      }
      return tryFocus(tabbableNodes[currentFocusIndex - 1]);
    }

    if (e.target === lastTabbableNode) return tryFocus(firstTabbableNode);

    tryFocus(tabbableNodes[currentFocusIndex + 1]);
  }

  function updateTabbableNodes() {
    tabbableNodes = tabbable(container);
    firstTabbableNode = tabbableNodes[0];
    lastTabbableNode = tabbableNodes[tabbableNodes.length - 1];
  }

  function readjustFocus(e) {
    if (e.shiftKey) return tryFocus(lastTabbableNode);

    tryFocus(firstTabbableNode);
  }
}

function isEscapeEvent(e) {
  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;
}

function tryFocus(node) {
  if (!node || !node.focus) return;
  if (node === document.activeElement)  return;

  node.focus();
  if (node.tagName.toLowerCase() === 'input') {
    node.select();
  }
}

var focusTrap_1 = focusTrap;

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function createFocusTrapInstance(surfaceEl, acceptButtonEl, focusTrapFactory = focusTrap_1) {
  return focusTrapFactory(surfaceEl, {
    initialFocus: acceptButtonEl,
    clickOutsideDeactivates: true,
  });
}

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MdcDialogComponent {
    /**
     * @param {?} elementRef
     * @param {?} _registry
     * @param {?} dialogRef
     */
    constructor(elementRef, _registry, dialogRef) {
        this.elementRef = elementRef;
        this._registry = _registry;
        this.dialogRef = dialogRef;
        this.clickOutsideToClose = true;
        this.escapeToClose = true;
        this.backdrop = true;
        this.isHostClass = true;
        this.alertDialog = 'alertdialog';
        this.ariaHidden = 'true';
        this.tabIndex = -1;
        /**
         * Event emitted when the dialog is closed.
         */
        this.closed = new EventEmitter();
        this._accept = new EventEmitter();
        this._cancel = new EventEmitter();
        this._mdcAdapter = {
            addClass: (className) => this._getHostElement().classList.add(className),
            removeClass: (className) => this._getHostElement().classList.remove(className),
            addBodyClass: (className) => {
                if (isBrowser()) {
                    document.body.classList.add(className);
                }
            },
            removeBodyClass: (className) => {
                if (isBrowser()) {
                    document.body.classList.remove(className);
                }
            },
            eventTargetHasClass: (target, className) => target.classList.contains(className),
            registerInteractionHandler: (evt, handler) => {
                const /** @type {?} */ clickOutsideToClose = this.config ? this.config.clickOutsideToClose : this.clickOutsideToClose;
                handler = this._surface && clickOutsideToClose ? handler : (event) => {
                    if ((/** @type {?} */ (event.target)).classList.contains('mdc-dialog__footer__button--accept')) {
                        this.accept();
                    }
                    else if ((/** @type {?} */ (event.target)).classList.contains('mdc-dialog__footer__button--cancel')) {
                        this.cancel();
                    }
                };
                this._registry.listen(evt, handler, this._getHostElement());
            },
            deregisterInteractionHandler: (evt, handler) => this._registry.unlisten(evt, handler),
            registerSurfaceInteractionHandler: (evt, handler) => this._registry.listen(evt, handler, this._surface.elementRef.nativeElement),
            deregisterSurfaceInteractionHandler: (evt, handler) => this._registry.unlisten(evt, handler),
            registerDocumentKeydownHandler: (handler) => {
                if (!isBrowser()) {
                    return;
                }
                const /** @type {?} */ escapeToClose = this.config ? this.config.escapeToClose : this.escapeToClose;
                handler = escapeToClose ? handler : this._onKeyDown;
                this._registry.listen('keydown', handler, document);
            },
            deregisterDocumentKeydownHandler: (handler) => {
                if (!isBrowser()) {
                    return;
                }
                const /** @type {?} */ escapeToClose = this.config ? this.config.escapeToClose : this.escapeToClose;
                this._registry.unlisten('keydown', escapeToClose ? handler : this._onKeyDown);
            },
            registerTransitionEndHandler: (handler) => this._registry.listen('transitionend', handler, this._surface.elementRef.nativeElement),
            deregisterTransitionEndHandler: (handler) => this._registry.unlisten('transitionend', handler),
            notifyAccept: () => {
                this._accept.emit();
                this._closeDialogRef();
            },
            notifyCancel: () => {
                this._cancel.emit();
                this._closeDialogRef();
            },
            trapFocusOnSurface: () => {
                if (this._focusTrap) {
                    this._focusTrap.activate();
                }
            },
            untrapFocusOnSurface: () => {
                if (this._focusTrap) {
                    this._focusTrap.deactivate();
                }
            },
            isDialog: (el) => this._surface ? el === this._surface.elementRef.nativeElement : false
        };
        this._foundation = new MDCDialogFoundation(this._mdcAdapter);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.dialogRef) {
            this.config = this.dialogRef.componentInstance.config;
            setTimeout(() => {
                this.show();
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._foundation.destroy();
    }
    /**
     * @return {?}
     */
    initDeclarativeConfig() {
        this.config = new MdcDialogConfig();
        this.config.backdrop = this.backdrop;
        this.config.clickOutsideToClose = this.clickOutsideToClose;
        this.config.escapeToClose = this.escapeToClose;
    }
    /**
     * @return {?}
     */
    show() {
        if (!this.dialogRef) {
            this.initDeclarativeConfig();
        }
        this._foundation.init();
        const /** @type {?} */ focusedEl = this._actions.find((_) => _.accept);
        if (isBrowser()) {
            this._focusTrap = createFocusTrapInstance(this._surface.elementRef.nativeElement, {
                initialFocus: focusedEl ? focusedEl.getHostElement() : this._getHostElement(),
                clickOutsideDeactivates: this.config ? this.config.clickOutsideToClose : this.clickOutsideToClose,
                escapeDeactivates: this.config ? this.config.escapeToClose : this.escapeToClose,
            });
        }
        this._foundation.open();
        if (focusedEl) {
            focusedEl.focus();
        }
    }
    /**
     * @param {?=} result
     * @return {?}
     */
    _closeDialogRef(result) {
        if (this.dialogRef) {
            this.dialogRef.close(result);
        }
    }
    /**
     * @return {?}
     */
    close() {
        this.closed.emit();
        this._foundation.close();
    }
    /**
     * @return {?}
     */
    isOpen() {
        return this._foundation.isOpen();
    }
    /**
     * @param {?=} shouldNotify
     * @return {?}
     */
    accept(shouldNotify = true) {
        this._foundation.accept(shouldNotify);
    }
    /**
     * @param {?=} shouldNotify
     * @return {?}
     */
    cancel(shouldNotify = true) {
        this._foundation.cancel(shouldNotify);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _onKeyDown(event) {
        if (ESCAPE === event.keyCode) {
            event.stopPropagation();
        }
    }
    /**
     * Retrieves the DOM element of the component host.
     * @return {?}
     */
    _getHostElement() {
        return this.elementRef.nativeElement;
    }
}
MdcDialogComponent.decorators = [
    { type: Component, args: [{selector: 'mdc-dialog',
                template: `
  <ng-content></ng-content>
  <div class="mdc-dialog__backdrop" *ngIf="config?.backdrop"></div>
  `,
                host: {
                    '[attr.aria-labelledby]': 'config?.ariaLabel',
                    '[attr.aria-label]': 'config?.ariaLabel',
                    '[attr.aria-describedby]': 'config?.ariaDescribedBy || null',
                },
                providers: [EventRegistry],
                encapsulation: ViewEncapsulation.None
            },] },
];
/** @nocollapse */
MdcDialogComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EventRegistry },
    { type: MdcDialogRef, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
MdcDialogComponent.propDecorators = {
    clickOutsideToClose: [{ type: Input }],
    escapeToClose: [{ type: Input }],
    backdrop: [{ type: Input }],
    isHostClass: [{ type: HostBinding, args: ['class.mdc-dialog',] }],
    alertDialog: [{ type: HostBinding, args: ['attr.role',] }],
    ariaHidden: [{ type: HostBinding, args: ['attr.aria-hidden',] }],
    tabIndex: [{ type: HostBinding, args: ['tabindex',] }],
    closed: [{ type: Output }],
    _accept: [{ type: Output, args: ['accept',] }],
    _cancel: [{ type: Output, args: ['cancel',] }],
    _surface: [{ type: ContentChild, args: [MdcDialogSurface,] }],
    _dialogBody: [{ type: ContentChild, args: [MdcDialogBody,] }],
    _actions: [{ type: ContentChildren, args: [MdcDialogButton, { descendants: true },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MdcDialog {
    /**
     * @param {?} _portalService
     * @param {?} injector
     * @param {?} dialogRefConstructor
     */
    constructor(_portalService, injector, dialogRefConstructor) {
        this._portalService = _portalService;
        this.injector = injector;
        this.dialogRefConstructor = dialogRefConstructor;
        this._afterClosed = new Subject();
        this.afterClosed = defer(() => this.openDialogs.length ?
            this._afterAllClosed : this._afterAllClosed.pipe(startWith(undefined)));
        this._openDialogs = [];
    }
    /**
     * Stream that emits when all dialogs are closed.
     * @return {?}
     */
    get _afterAllClosed() {
        return this._afterClosed;
    }
    /**
     * Stream that emits when a dialog is opened.
     * @return {?}
     */
    get openDialogs() {
        return this._openDialogs;
    }
    /**
     * Gets an open dialog by id.
     * @param {?} id
     * @return {?}
     */
    getById(id) {
        return this._openDialogs.find(ref => ref.id === id);
    }
    /**
     * Closes all open dialogs.
     * @return {?}
     */
    close() {
        this.openDialogs.forEach(ref => ref.close());
    }
    /**
     * Opens a dialog containing the given component.
     * @template T
     * @param {?} component
     * @param {?=} config
     * @return {?}
     */
    open(component, config) {
        config = this._applyConfigDefaults(config);
        if (config.id && this.getById(config.id)) {
            throw Error(`Dialog with id "${config.id}" exists already. The dialog id must be unique.`);
        }
        const /** @type {?} */ dialogContainer = this._attachDialogContainer(config);
        const /** @type {?} */ dialogRef = this._attachDialogContentForComponent(component, dialogContainer, config);
        this._registerDialogRef(dialogRef);
        dialogRef.componentInstance.config = config;
        return dialogRef;
    }
    /**
     * @param {?} config
     * @return {?}
     */
    _attachDialogContainer(config) {
        const /** @type {?} */ container = config.containerComponent || this.injector.get(DIALOG_CONTAINER);
        const /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
        const /** @type {?} */ injector = new PortalInjector(userInjector || this.injector, new WeakMap([
            [MdcDialogConfig, config]
        ]));
        const /** @type {?} */ containerPortal = new ComponentPortal(container, config.viewContainerRef, injector);
        const /** @type {?} */ containerRef = this._portalService.createComponentRef(containerPortal.component);
        containerRef.instance.config = config;
        return containerRef.instance;
    }
    /**
     * @template T
     * @param {?} component
     * @param {?} dialogContainer
     * @param {?} config
     * @return {?}
     */
    _attachDialogContentForComponent(component, dialogContainer, config) {
        // Create a reference to the dialog we're creating in order to give the user a handle
        // to modify and close it.
        const /** @type {?} */ dialogRef = new this.dialogRefConstructor(dialogContainer, config.id);
        const /** @type {?} */ injector = this._createInjector(config, dialogRef, dialogContainer);
        const /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(component, undefined, injector));
        dialogRef.componentInstance = contentRef.instance;
        return dialogRef;
    }
    /**
     * Forwards emitting events for when dialogs are opened and all dialogs are closed.
     * @param {?} dialogRef
     * @return {?}
     */
    _registerDialogRef(dialogRef) {
        this.openDialogs.push(dialogRef);
        const /** @type {?} */ dialogCloseSub = dialogRef.afterClosed().subscribe(() => {
            const /** @type {?} */ dialogIdx = this._openDialogs.indexOf(dialogRef);
            if (dialogIdx !== -1) {
                this._openDialogs.splice(dialogIdx, 1);
            }
            if (!this._openDialogs.length) {
                this._afterClosed.next();
                dialogCloseSub.unsubscribe();
            }
            this._portalService.dispose();
        });
    }
    /**
     * @template T
     * @param {?} config
     * @param {?} dialogRef
     * @param {?} dialogContainer
     * @return {?}
     */
    _createInjector(config, dialogRef, dialogContainer) {
        const /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
        const /** @type {?} */ injectionTokens = new WeakMap([
            [this.injector.get(DIALOG_REF), dialogRef],
            [this.injector.get(DIALOG_CONTAINER), dialogContainer],
            [DIALOG_DATA, config.data]
        ]);
        return new PortalInjector(userInjector || this.injector, injectionTokens);
    }
    /**
     * Expands the provided configuration object to include the default values for properties which
     * are undefined.
     * @param {?=} config
     * @return {?}
     */
    _applyConfigDefaults(config) {
        const /** @type {?} */ dialogConfig = /** @type {?} */ (this.injector.get(DIALOG_CONFIG));
        return Object.assign({}, new dialogConfig(), config);
    }
}
MdcDialog.decorators = [
    { type: Injectable },
];
/** @nocollapse */
MdcDialog.ctorParameters = () => [
    { type: MdcPortalService },
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [DIALOG_REF,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ DIALOG_DECLARATIONS = [
    MdcDialogBody,
    MdcDialogButton,
    MdcDialogComponent,
    MdcDialogContainer,
    MdcDialogFooter,
    MdcDialogHeader,
    MdcDialogHeaderTitle,
    MdcDialogSurface
];
const ɵ0 = MdcDialogRef, ɵ1 = MdcDialogContainer, ɵ2 = MdcDialogConfig;
class MdcDialogModule {
}
MdcDialogModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, PortalModule],
                exports: DIALOG_DECLARATIONS,
                declarations: DIALOG_DECLARATIONS,
                providers: [
                    MdcPortalService,
                    MdcDialog,
                    { provide: DIALOG_REF, useValue: ɵ0 },
                    { provide: DIALOG_CONTAINER, useValue: ɵ1 },
                    { provide: DIALOG_CONFIG, useValue: ɵ2 }
                ],
                entryComponents: [MdcDialogContainer]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { MdcDialogConfig, MdcDialogContainer, MdcDialogSurface, MdcDialogHeader, MdcDialogHeaderTitle, MdcDialogBody, MdcDialogFooter, MdcDialogButton, DIALOG_DATA, DIALOG_REF, DIALOG_CONFIG, DIALOG_CONTAINER, MdcDialogModule, MdcDialogRef, MdcDialogComponent, MdcDialog };
