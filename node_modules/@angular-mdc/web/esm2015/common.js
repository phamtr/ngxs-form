/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
import { Injectable, ContentChildren, Directive, EventEmitter, NgModule, Output } from '@angular/core';
import { NavigationEnd, Router, RouterLink, RouterLinkWithHref } from '@angular/router';
import { filter, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
function toBoolean(value) {
    return value != null && `${value}` !== 'false';
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EventRegistry {
    constructor() {
        this.unlisteners = new Map();
    }
    /**
     * @param {?} type
     * @param {?} listener
     * @param {?} target
     * @param {?=} passive
     * @return {?}
     */
    listen(type, listener, target, passive) {
        if (!this.unlisteners.has(type)) {
            this.unlisteners.set(type, new WeakMap());
        }
        target.addEventListener(type, listener, passive);
        this.unlisteners.get(type).set(listener, () => { target.removeEventListener(type, listener, passive); });
    }
    /**
     * @param {?} type
     * @param {?} listener
     * @return {?}
     */
    unlisten(type, listener) {
        if (!this.unlisteners.has(type)) {
            return;
        }
        const /** @type {?} */ unlisteners = this.unlisteners.get(type);
        if (!unlisteners.has(listener)) {
            return;
        }
        unlisteners.get(listener)();
        unlisteners.delete(listener);
    }
}
EventRegistry.decorators = [
    { type: Injectable },
];
/** @nocollapse */
EventRegistry.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} event
 * @return {?}
 */
function isSpaceKey(event) {
    // NB: keyCode does not work on Firefox, returning `0` for the space key.
    return event.keyCode !== 0 ? event.keyCode === 32 : event.key === ' ';
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const /** @type {?} */ UP_ARROW = 38;
const /** @type {?} */ DOWN_ARROW = 40;
const /** @type {?} */ RIGHT_ARROW = 39;
const /** @type {?} */ LEFT_ARROW = 37;
const /** @type {?} */ PAGE_UP = 33;
const /** @type {?} */ PAGE_DOWN = 34;
const /** @type {?} */ HOME = 36;
const /** @type {?} */ END = 35;
const /** @type {?} */ ENTER = 13;
const /** @type {?} */ SPACE = 32;
const /** @type {?} */ TAB = 9;
const /** @type {?} */ ESCAPE = 27;
const /** @type {?} */ BACKSPACE = 8;
const /** @type {?} */ DELETE = 46;
const /** @type {?} */ A = 65;
const /** @type {?} */ Z = 90;
const /** @type {?} */ ZERO = 48;
const /** @type {?} */ NINE = 57;
const /** @type {?} */ COMMA = 188;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} value
 * @param {?=} fallbackValue
 * @return {?}
 */
function toNumber(value, fallbackValue = 0) {
    return _isNumberValue(value) ? Number(value) : fallbackValue;
}
/**
 * Whether the provided value is considered a number.
 * @param {?} value
 * @return {?}
 */
function _isNumberValue(value) {
    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,
    // and other non-number values as NaN, where Number just uses 0) but it considers the string
    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.
    return !isNaN(parseFloat(/** @type {?} */ (value))) && !isNaN(Number(value));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @return {?}
 */
function isBrowser() {
    return typeof document === 'object' && !!document;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MdcRouter {
    /**
     * @param {?} _router
     */
    constructor(_router) {
        this._router = _router;
        /**
         * Emits whenever the component is destroyed.
         */
        this._destroy = new Subject();
        /**
         * Event emitted when the link is set active.
         */
        this.routeChange = new EventEmitter();
        this._router.events
            .pipe(takeUntil(this._destroy), filter(event => event instanceof NavigationEnd)).subscribe(_ => {
            this._refreshActiveLink();
        });
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._listenToLinkChanges();
        this._listenToHrefLinkChanges();
        this._refreshActiveLink();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._destroy.next();
        this._destroy.complete();
    }
    /**
     * @return {?}
     */
    _listenToLinkChanges() {
        this._routerlinks.changes
            .pipe(takeUntil(this._destroy))
            .subscribe(() => {
            this._refreshActiveLink();
        });
    }
    /**
     * @return {?}
     */
    _listenToHrefLinkChanges() {
        this._routerHrefLinks.changes
            .pipe(takeUntil(this._destroy))
            .subscribe(() => {
            this._refreshActiveLink();
        });
    }
    /**
     * @return {?}
     */
    _refreshActiveLink() {
        if (!this._isRouterActivated()) {
            return;
        }
        this._emitActivated(this._linkState());
    }
    /**
     * @return {?}
     */
    _isRouterActivated() {
        return (!this._routerlinks || !this._routerHrefLinks
            || !this._router.navigated) ? false : true;
    }
    /**
     * @return {?}
     */
    _linkState() {
        return this._routerlinks.some(this.isLinkActive())
            || this._routerHrefLinks.some(this.isLinkActive());
    }
    /**
     * @return {?}
     */
    isLinkActive() {
        return (route) => this._router.isActive(route.urlTree, false);
    }
    /**
     * Emits an activated link event.
     * @param {?} active
     * @return {?}
     */
    _emitActivated(active) {
        this.routeChange.emit({ active: active });
    }
}
MdcRouter.decorators = [
    { type: Directive, args: [{
                selector: '[mdcRouter]',
                exportAs: 'mdcRouter'
            },] },
];
/** @nocollapse */
MdcRouter.ctorParameters = () => [
    { type: Router }
];
MdcRouter.propDecorators = {
    routeChange: [{ type: Output }],
    _routerlinks: [{ type: ContentChildren, args: [RouterLink, { descendants: true },] }],
    _routerHrefLinks: [{ type: ContentChildren, args: [RouterLinkWithHref, { descendants: true },] }]
};
class MdcRouterModule {
}
MdcRouterModule.decorators = [
    { type: NgModule, args: [{
                exports: [MdcRouter],
                declarations: [MdcRouter],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { toBoolean, EventRegistry, isSpaceKey, UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, PAGE_UP, PAGE_DOWN, HOME, END, ENTER, SPACE, TAB, ESCAPE, BACKSPACE, DELETE, A, Z, ZERO, NINE, COMMA, toNumber, _isNumberValue, isBrowser, MdcRouter, MdcRouterModule };
