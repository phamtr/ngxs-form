import { Injector } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { MdcPortalService, ComponentType } from '@angular-mdc/web/portal';
import { MdcDialogRef } from './dialog-ref';
import { MdcDialogContainer } from './dialog-container';
import { MdcDialogConfig } from './dialog-config';
export declare class MdcDialog {
    private _portalService;
    private injector;
    private dialogRefConstructor;
    /** Stream that emits when all dialogs are closed. */
    readonly _afterAllClosed: Observable<void>;
    _afterClosed: Subject<void>;
    afterClosed: Observable<void>;
    /** Stream that emits when a dialog is opened. */
    readonly openDialogs: MdcDialogRef<any>[];
    _openDialogs: MdcDialogRef<any>[];
    constructor(_portalService: MdcPortalService, injector: Injector, dialogRefConstructor: any);
    /** Gets an open dialog by id. */
    getById(id: string): MdcDialogRef<any> | undefined;
    /** Closes all open dialogs. */
    close(): void;
    /**
     * Opens a dialog containing the given component.
     */
    open<T>(component: ComponentType<T>, config?: MdcDialogConfig): MdcDialogRef<any> | undefined;
    protected _attachDialogContainer(config: MdcDialogConfig): MdcDialogContainer;
    protected _attachDialogContentForComponent<T>(component: ComponentType<T>, dialogContainer: MdcDialogContainer, config: MdcDialogConfig): MdcDialogRef<any>;
    /**
       * Forwards emitting events for when dialogs are opened and all dialogs are closed.
       */
    private _registerDialogRef(dialogRef);
    private _createInjector<T>(config, dialogRef, dialogContainer);
    /**
     * Expands the provided configuration object to include the default values for properties which
     * are undefined.
     */
    private _applyConfigDefaults(config?);
}
